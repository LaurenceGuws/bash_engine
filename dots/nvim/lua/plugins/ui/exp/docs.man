DEFAULT MOUSE
                                                *default-mouse* *disable-mouse*
By default the mouse is enabled, and <RightMouse> opens a |popup-menu| with
standard actions ("Cut", "Copy", "Paste", …). Mouse is NOT enabled in
|command-mode| or the |more-prompt|, so you can temporarily disable it just by
typing ":".

If you don't like this you can disable the mouse in your |config| using any of
the following:
- Disable mouse completely by unsetting the 'mouse' option: >vim
  set mouse=
- Pressing <RightMouse> extends selection instead of showing popup-menu: >vim
  set mousemodel=extend
- Pressing <A-LeftMouse> releases mouse until the cursor moves:  >vim
  nnoremap <A-LeftMouse> <Cmd>
    \ set mouse=<Bar>
    \ echo 'mouse OFF until next cursor-move'<Bar>
    \ autocmd CursorMoved * ++once set mouse&<Bar>
    \ echo 'mouse ON'<CR>
<
To remove the "How-to disable mouse" menu item and the separator above it: >vim
  aunmenu PopUp.How-to\ disable\ mouse
  aunmenu PopUp.-1-
<
DEFAULT MAPPINGS
                                                        *default-mappings*
Nvim creates the following default mappings at |startup|. You can disable any
of these in your config by simply removing the mapping, e.g. ":unmap Y".

- Y |Y-default|
- <C-U> |i_CTRL-U-default|
- <C-W> |i_CTRL-W-default|
- <C-L> |CTRL-L-default|
- & |&-default|
- Q |v_Q-default|
- @ |v_@-default|
- # |v_#-default|
- * |v_star-default|
- gc |gc-default| |v_gc-default| |o_gc-default|
- gcc |gcc-default|
- ]d |]d-default|
- [d |[d-default|
- <C-W>d |CTRL-W_d-default|
- Nvim LSP client defaults |lsp-defaults|
  - K |K-lsp-default|

DEFAULT AUTOCOMMANDS
                                                        *default-autocmds*
Default autocommands exist in the following groups. Use ":autocmd! {group}" to
remove them and ":autocmd {group}" to see how they're defined.

nvim_terminal:
- BufReadCmd: Treats "term://" buffers as |terminal| buffers. |terminal-start|
- TermClose: A |terminal| buffer started with no arguments (which thus uses
  'shell') and which exits with no error is closed automatically.
- TermRequest: The terminal emulator responds to OSC background and foreground
  requests, indicating (1) a black background and white foreground when Nvim
  option 'background' is "dark" or (2) a white background and black foreground
  when 'background' is "light". While this may not reflect the actual
  foreground/background color, it permits 'background' to be retained for a
  nested Nvim instance running in the terminal emulator.

nvim_cmdwin:
- CmdwinEnter: Limits syntax sync to maxlines=1 in the |cmdwin|.

nvim_swapfile:
- SwapExists: Skips the swapfile prompt (sets |v:swapchoice| to "e") when the
  swapfile is owned by a running Nvim process. Shows |W325| "Ignoring
  swapfile…" message.

==============================================================================
New Features                                                   *nvim-features*

MAJOR COMPONENTS

- API                             |API|
- Job control                     |job-control|
- LSP framework                   |lsp|
- Lua scripting                   |lua|
- Parsing engine                  |treesitter|
- Providers
  - Clipboard                     |provider-clipboard|
  - Node.js plugins               |provider-nodejs|
  - Python plugins                |provider-python|
  - Ruby plugins                  |provider-ruby|
- Remote plugins                  |remote-plugin|
- Shared data                     |shada|
- Terminal emulator               |terminal|
- UI                              |ui| |--listen| |--server|
- Vimscript parser                |nvim_parse_expression()|
- XDG base directories            |xdg|

USER EXPERIENCE

Working intuitively and consistently is a major goal of Nvim.

                                                        *feature-compile*
- Nvim always includes ALL features, in contrast to Vim (which ships various
  combinations of 100+ optional features).  |feature-compile| Think of it as
  a leaner version of Vim's "HUGE" build. This reduces surface area for bugs,
  and removes a common source of confusion and friction for users.

- Nvim avoids features that cannot be provided on all platforms; instead that
  is delegated to external plugins/extensions. E.g. the `-X` platform-specific
  option is "sometimes" available in Vim (with potential surprises:
  https://stackoverflow.com/q/14635295).

- Vim's internal test functions (test_autochdir(), test_settime(), etc.) are
  not exposed (nor implemented); instead Nvim has a robust API.

- Behaviors, options, documentation are removed if they cost users more time
  than they save.

Usability details have been improved where the benefit outweighs any
backwards-compatibility cost. Some examples:

- Directories for 'directory' and 'undodir' are auto-created.
- Terminal features such as 'guicursor' are enabled where possible.
- Various "nvim" |cli-arguments| were redesigned.

Some features are built in that otherwise required external plugins:

- Highlighting the yanked region, see |vim.highlight|.

ARCHITECTURE

The Nvim UI is "decoupled" from the core editor: all UIs, including the
builtin |TUI| are just plugins that connect to a Nvim server (via |--server|
or |--embed|). Multiple Nvim UI clients can connect to the same Nvim editor
server.

External plugins run in separate processes. |remote-plugin| This improves
stability and allows those plugins to work without blocking the editor. Even
"legacy" Python and Ruby plugins which use the old Vim interfaces (|if_pyth|,
|if_ruby|) run out-of-process, so they cannot crash Nvim.

Platform and I/O facilities are built upon libuv. Nvim benefits from libuv
features and bug fixes, and other projects benefit from improvements to libuv
by Nvim developers.

FEATURES

Command-line:
- The expression prompt (|@=|, |c_CTRL-R_=|, |i_CTRL-R_=|) is highlighted
  using a built-in Vimscript expression parser. |expr-highlight|
- *E5408* *E5409* |input()|, |inputdialog()| support custom highlighting.
  |input()-highlight|
- (Experimental) *g:Nvim_color_cmdline* Command-line (|:|) is colored by
  callback defined in `g:Nvim_color_cmdline` (this callback is for testing
  only, and will be removed in the future).

Commands:
- |:checkhealth|
- |:drop| is always available
- |:Man| is available by default, with many improvements such as completion
- |:match| can be invoked before highlight group is defined
- |:source| works with Lua
  User commands can support |:command-preview| to show results as you type
- |:write| with "++p" flag creates parent directories.

Events:
- |RecordingEnter|
- |RecordingLeave|
- |SearchWrapped|
- |Signal|
- |TabNewEntered|
- |TermClose|
- |TermOpen|
- |UIEnter|
- |UILeave|

Functions:
- |dictwatcheradd()| notifies a callback whenever a |Dict| is modified
- |dictwatcherdel()|
- |menu_get()|
- |msgpackdump()|, |msgpackparse()| provide msgpack de/serialization
- |stdpath()|
- |system()|, |systemlist()| can run {cmd} directly (without 'shell')
- |matchadd()| can be called before highlight group is defined
- |tempname()| tries to recover if the Nvim |tempdir| disappears.
- |writefile()| with "p" flag creates parent directories.

Highlight groups:
- |highlight-blend| controls blend level for a highlight group
- |expr-highlight| highlight groups (prefixed with "Nvim")
- |hl-NormalFloat| highlights floating window
- |hl-FloatBorder| highlights border of a floating window
- |hl-FloatTitle| highlights title of a floating window
- |hl-FloatFooter| highlights footer of a floating window
- |hl-NormalNC| highlights non-current windows
- |hl-MsgArea| highlights messages/cmdline area
- |hl-MsgSeparator| highlights separator for scrolled messages
- |hl-Substitute|
- |hl-TermCursor|
- |hl-TermCursorNC|
- |hl-WinSeparator| highlights window separators
- |hl-Whitespace| highlights 'listchars' whitespace
- |hl-WinBar| highlights 'winbar'
- |hl-WinBarNC| highlights non-current window 'winbar'

Input/Mappings:
- ALT (|META|) chords always work (even in the |TUI|). Map |<M-| with any key:
  <M-1>, <M-BS>, <M-Del>, <M-Ins>, <M-/>, <M-\>, <M-Space>, <M-Enter>, etc.
  - Case-sensitive: <M-a> and <M-A> are two different keycodes.
- ALT may behave like <Esc> if not mapped. |i_ALT| |v_ALT| |c_ALT|

Normal commands:
- |gO| shows a filetype-defined "outline" of the current buffer.
- |Q| replays the last recorded macro instead of switching to Ex mode (|gQ|).

Options:

Local values for global-local number/boolean options are unset when the option
is set without a scope (e.g. by using |:set|), similarly to how global-local
string options work.

- 'autoread'    works in the terminal (if it supports "focus" events)
- 'cpoptions'   flags: |cpo-_|
- 'diffopt'     "linematch" feature
- 'exrc'        searches for ".nvim.lua", ".nvimrc", or ".exrc" files. The
                user is prompted whether to trust the file.
- 'fillchars'   flags: "msgsep", "horiz", "horizup", "horizdown",
                "vertleft", "vertright", "verthoriz"
- 'foldcolumn'  supports up to 9 dynamic/fixed columns
- 'guicursor'   works in the terminal (TUI)
- 'inccommand'  shows interactive results for |:substitute|-like commands
                and |:command-preview| commands
- 'jumpoptions' "view" tries to restore the |mark-view| when moving through
                "clean" removes unloaded buffer from the jumplist
- the |jumplist|, |changelist|, |alternate-file| or using |mark-motions|.
- 'laststatus'  global statusline support
- 'mousescroll' amount to scroll by when scrolling with a mouse
- 'pumblend'    pseudo-transparent popupmenu
- 'scrollback'
- 'shortmess'
    - "F" flag does not affect output from autocommands.
    - "q" flag fully hides macro recording message.
- 'signcolumn'  supports up to 9 dynamic/fixed columns
- 'statuscolumn' full control of columns using 'statusline' format
- 'tabline'     middle-click on tabpage label closes tabpage,
                and %@Func@foo%X can call any function on mouse-click
- 'termpastefilter'
- 'ttimeout', 'ttimeoutlen' behavior was simplified
- 'winblend'    pseudo-transparency in floating windows |api-floatwin|
- 'winhighlight' window-local highlights

Providers:
- If a Python interpreter is available on your `$PATH`, |:python| and
  |:python3| are always available. See |provider-python|.

Shell:
- Shell output (|:!|, |:make|, …) is always routed through the UI, so it
  cannot "mess up" the screen. (You can still use "chansend(v:stderr,…)" if
  you want to mess up the screen :)
- Nvim throttles (skips) messages from shell commands (|:!|, |:grep|, |:make|)
  if there is too much output. No data is lost, this only affects display and
  improves performance. |:terminal| output is never throttled.
- |:!| does not support "interactive" commands. Use |:terminal| instead.
  (GUI Vim has a similar limitation, see ":help gui-pty" in Vim.)
- :!start is not special-cased on Windows.
- |system()| does not support writing/reading "backgrounded" commands. |E5677|

Signs:
- Signs are removed if the associated line is deleted.
- Signs placed twice with the same identifier in the same group are moved.

Startup:
- |-e| and |-es| invoke the same "improved Ex mode" as -E and -Es.
- |-E| and |-Es| read stdin as text (into buffer 1).
- |-es| and |-Es| have improved behavior:
    - Quits automatically, don't need "-c qa!".
    - Skips swap-file dialog.
- |-s| reads Normal commands from stdin if the script name is "-".
- Reading text (instead of commands) from stdin |--|:
    - works by default: "-" file is optional
    - works in more cases: |-Es|, file args

TUI:
                        *:set-termcap*
- Start Nvim with 'verbose' level 3 to show terminal capabilities: >
        nvim -V3
<
                        *'term'* *E529* *E530* *E531*
- 'term' reflects the terminal type derived from |$TERM| and other environment
  checks.  For debugging only; not reliable during startup. >vim
          :echo &term
-  "builtin_x" means one of the |builtin-terms| was chosen, because the expected
  terminfo file was not found on the system.
- Nvim will use 256-colour capability on Linux virtual terminals.  Vim uses
  only 8 colours plus bright foreground on Linux VTs.
- Vim combines what is in its |builtin-terms| with what it reads from terminfo,
  and has a 'ttybuiltin' setting to control how that combination works.  Nvim
  uses one or the other, it does not attempt to merge the two.

UI/Display:
- |Visual| selection highlights the character at cursor. |visual-use|
- messages: When showing messages longer than 'cmdheight', only
  scroll the message lines, not the entire screen. The
  separator line is decorated by |hl-MsgSeparator| and
  the "msgsep" flag of 'fillchars'. *msgsep*

Variables:
- |v:progpath| is always absolute ("full")
- |v:windowid| is always available (for use by external UIs)
- |OptionSet| autocommand args |v:option_new|, |v:option_old|,
- |v:option_oldlocal|, |v:option_oldglobal| have the type of the option
  instead of always being strings. |v:option_old| is now the old global value
  for all global-local options, instead of just string global-local options.

Vimscript:
- |:redir| nested in |execute()| works.

==============================================================================
Upstreamed features                                      *nvim-upstreamed*

These Nvim features were later integrated into Vim.

- 'fillchars' flags: "eob"
- 'jumpoptions' "stack" behavior
- 'wildoptions' flags: "pum" enables popupmenu for wildmode completion
- |<Cmd>|
- |WinClosed|
- |WinScrolled|
- |:sign-define| "numhl" argument
- |:source| works with anonymous (no file) scripts
- 'statusline' supports unlimited alignment sections

==============================================================================
Other changes                                            *nvim-changed*

This section documents various low-level behavior changes.

|mkdir()| behaviour changed:
- 1. Assuming /tmp/foo does not exist and /tmp can be written to
     mkdir('/tmp/foo/bar', 'p', 0700) will create both /tmp/foo and
     /tmp/foo/bar with 0700 permissions. Vim mkdir will create /tmp/foo with
     0755.
- 2. If you try to create an existing directory with `'p'` (e.g. mkdir('/',
     'p')) mkdir() will silently exit. In Vim this was an error.
- 3. mkdir() error messages now include strerror() text when mkdir fails.

|string()| and |:echo| behaviour changed:
- 1. No maximum recursion depth limit is applied to nested container
     structures.
- 2. |string()| fails immediately on nested containers, not when recursion
     limit was exceeded.
- 3. When |:echo| encounters duplicate containers like >vim
       let l = []
       echo [l, l]
<     it does not use "[...]" (was: "[[], [...]]", now: "[[], []]"). "..." is
     only used for recursive containers.
- 4. |:echo| printing nested containers adds "@level" after "..." designating
     the level at which recursive container was printed: |:echo-self-refer|.
     Same thing applies to |string()| (though it uses construct like
     "{E724@level}"), but this is not reliable because |string()| continues to
     error out.
- 5. Stringifyed infinite and NaN values now use |str2float()| and can be
     evaled back.
- 6. (internal) Trying to print or stringify VAR_UNKNOWN in Vim results in
     nothing, E908, in Nvim it is internal error.

|json_decode()| behaviour changed:
- 1. It may output |msgpack-special-dict|.
- 2. |msgpack-special-dict| is emitted also in case of duplicate keys, while
     in Vim it errors out.
- 3. It accepts only valid JSON.  Trailing commas are not accepted.

|json_encode()| behaviour slightly changed: now |msgpack-special-dict| values
are accepted, but |v:none| is not.

Viminfo text files were replaced with binary (messagepack) |shada| files.
Additional differences:

- |shada-c| has no effect.
- |shada-s| now limits size of every item and not just registers.
- 'viminfo' option got renamed to 'shada'. Old option is kept as an alias for
  compatibility reasons.
- |:wviminfo| was renamed to |:wshada|, |:rviminfo| to |:rshada|.  Old
  commands are still kept.
- ShaDa file format was designed with forward and backward compatibility in
  mind. |shada-compatibility|
- Some errors make ShaDa code keep temporary file in-place for user to decide
  what to do with it.  Vim deletes temporary file in these cases.
  |shada-error-handling|
- ShaDa file keeps search direction (|v:searchforward|), viminfo does not.

|printf()| returns something meaningful when used with `%p` argument: in Vim
it used to return useless address of the string (strings are copied to the
newly allocated memory all over the place) and fail on types which cannot be
coerced to strings. See |id()| for more details, currently it uses
`printf("%p", {expr})` internally.

|c_CTRL-R| pasting a non-special register into |cmdline| omits the last <CR>.

|CursorMoved| triggers when moving between windows.

Lua interface (|lua.txt|):

- `:lua print("a\0b")` will print `a^@b`, like with `:echomsg "a\nb"` . In Vim
  that prints `a` and `b` on separate lines, exactly like
  `:lua print("a\nb")` .
- `:lua error('TEST')` emits the error: >
  E5108: Error executing lua: [string "<Vimscript compiled string>"]:1: TEST
<  whereas Vim emits only "TEST".
- Lua has direct access to Nvim |API| via `vim.api`.
- Lua package.path and package.cpath are automatically updated according to
  'runtimepath'. |lua-module-load|

Commands:
- |:doautocmd| does not warn about "No matching autocommands".
- |:wincmd| accepts a count.
- `:write!` does not show a prompt if the file was updated externally.
- |:=| does not accept |ex-flags|. With an arg it is equivalent to |:lua=|

Command-line:
- The meanings of arrow keys do not change depending on 'wildoptions'.

